unit TestmyLib;

interface

uses
  TestFramework, myLib;

type
  // Test methods for class TFuncionario

  TestTFuncionario = class(TTestCase)
  strict private
    FFuncionario: TFuncionario;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCalc_IR;
    procedure TestCalc_Inss;
  end;

implementation

procedure TestTFuncionario.SetUp;
begin
  FFuncionario := TFuncionario.Create;
end;

procedure TestTFuncionario.TearDown;
begin
  FFuncionario.Free;
  FFuncionario := nil;
end;

{ Cálculo de INSS e IR aplicado ao funcionário usando o valor do salário como base.
	* Regras de negócio
		* IR – O cálculo de IR será deduzido da base,
    salário 100 reais para cada dependente que possuir calcula IR
    e por fim desconta 15% do salário do funcionário.

 * Ex. Funcionário que ganha 1000,00 e que tenha dois dependentes
       onde o IsCalculaIR e IsCalculaINSS estejam marcados.
		* IR = 1000,00 - (2 * 100) = 800,00 – 15% = 120,00.
}
procedure TestTFuncionario.TestCalc_IR;
var
  ReturnValue: Double;
  NDCIR: Integer;
  Salario: Double;
begin
  NDCIR:= 2;
  Salario:= 1000;

  // TODO: Setup method call parameters
  ReturnValue := FFuncionario.Calc_IR(Salario, NDCIR);
  // TODO: Validate method results
  CheckEquals(120, ReturnValue, 'Sucesso');
end;

procedure TestTFuncionario.TestCalc_Inss;
var
  ReturnValue: Double;
  NDCInss: Integer;
  Salario: Double;
begin
  // TODO: Setup method call parameters
  ReturnValue := FFuncionario.Calc_Inss(Salario, NDCInss);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFuncionario.Suite);
end.

